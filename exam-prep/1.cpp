/*
 * –î–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—Ä–∞ M √ó N. [‚úÖ]
 * –ù–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–µ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π, —ç–ª–µ–º–µ–Ω—Ç—ã
 * –∫–æ—Ç–æ—Ä—ã—Ö —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑. [‚úÖ]
 * –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã —Å—á–∏—Ç–∞—Ç—å –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. [-]
 * –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∞—Ç—Ä–∏—Ü–µ–π —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. [ü´°]
 * –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Ä–∞–±–æ—Ç—É –Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞—Ö –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2—Ö —Ç–∏–ø–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, char –∏ float). [‚úÖ]
 */
#include <iostream>
#include <fstream>

using namespace std;

template <typename T>
T **generate_matrix(size_t m, size_t n)
{
	auto result = new T *[m];	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π, —Ç.–µ. —Å—Ç—Ä–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã
	for (int i = 0; i < m; i++) // –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
	{
		result[i] = new T[n]; // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
		for (int j = 0; j < n; j++)
		{
			result[i][j] = rand() % 21 - 10; // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ [-10; 10]
		}
	}

	cout << "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º–∞—Ç—Ä–∏—Ü–∞:" << endl;
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cout << result[i][j] << '\t';
		}
		cout << endl;
	}
	return result;
}
template <typename T>
T **read_matrix(size_t m, size_t n)
{
	auto result = new T *[m];	// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π, —Ç.–µ. —Å—Ç—Ä–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã
	for (int i = 0; i < m; i++) // –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
	{
		result[i] = new T[n]; // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
		for (int j = 0; j < n; j++)
		{
			cin >> result[i][j]; // –ß–∏—Ç–∞–µ–º –∫—Ä—á
		}
	}
	return result;
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–Ω—É—é –ø–∞–º—è—Ç—å –æ—Ç –º–∞—Ç—Ä–∏—Ü—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ.
template <typename T>
void dealloc_matrix(T **matrix, int m)
{
	// –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫–∏
	for (int i = 0; i < m; i++)
	{
		delete[] matrix[i];
	}
	// –ê –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å —Å–∞–º—É –º–∞—Ç—Ä–∏—Ü—É ü¶â
	delete[] matrix;
}

// –ó–∞–¥–∞—á–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–∞ –∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—é üòÇ

template <typename T>
bool is_diagonal_ascending(T **matrix, int m, int n, int start_i, int start_j)
{
	int i = start_i;
	int j = start_j;
	/*
	 * –ë–µ–∂–∏–º –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ last_value
	 * –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–≤–µ—Ä—Å–∏—é, –≤–æ–∑—Ä–∞—â–∞–µ–º –∞—Ñ–¥—ã—É (false) üòÇ
	 */
	int last_value = matrix[i][j];
	while (i < m && j < n)
	{
		if (matrix[i][j] < last_value)
		{
			// [2, 1]
			// [1, 1]
			// –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±–µ–∂–∏–º –ø–æ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏, —Ç–æ –≤ —Å–ª—É—á–∞–µ matrix[1][1] < matrix[0][0] = last_value
			return false;
		}
		last_value = matrix[i][j];
		i += 1;
		j += 1;
	}
	// –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, —Ç–æ –∏–Ω–≤–µ—Ä—Å–∏–π
	return true;
}

template <typename T>
size_t solve(T **matrix, size_t m, size_t n)
{
	size_t result = 0;
	/*
	 * –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ–±–µ–∂–∞—Ç—å—Å—è –ø–æ –≤—Å–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—è–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π.
	 * –ë–µ—Ä–µ–º –≤—Å–µ —É–≥–ª–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Ç–æ –µ—Å—Ç—å [0][0...n - 1] –∏ [1...m - 1][0]
	 *			_ _ _ _
	 *			_ * * *
	 *			_ * * *
	 * 			_ * * *
	 */
	for (int j = 0; j < n; j++)
	{
		result += is_diagonal_ascending(matrix, m, n, 0, j);
	}
	for (int i = 1; i < m; i++)
	{
		result += is_diagonal_ascending(matrix, m, n, i, 0);
	}
	return result;
}

template <typename T>
size_t solve_with_input(int input_choice, size_t m, size_t n)
{
	T **matrix;
	if (input_choice == 1)
	{
		matrix = generate_matrix<T>(m, n);
	}
	else
	{
		matrix = read_matrix<T>(m, n);
	}
	auto result = solve<T>(matrix, m, n);
	// –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∞ —Ç–æ –Ω–∞—Å—Ç—É—á–∞—Ç —Ç–∞–ø–∫–∞–º–∏ –ø–æ –ø–∞–ª—å—Ü–∞–º ‚Äº
	dealloc_matrix(matrix, m);
	return result;
}

int main()
{
	srand(time(NULL));
	setlocale(LC_ALL, "RUS");

	cout << "1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤" << endl;
	cout << "2. –°—á–∏—Ç–∞—Ç—å –º–∞—Å—Å–∏–≤" << endl;
	int input_choice = 0;
	do
	{
		cin >> input_choice;
		if (input_choice != 1 && input_choice != 2) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à "—É–º–Ω—ã–π" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª
		{
			cout << "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä" << endl; // –ì—É–ª—è–π, –º–∞–ª—å—á–∏–∫
		}
	} while (input_choice != 1 && input_choice != 2);

	cout << "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:" << endl;
	cout << "1. char" << endl;
	cout << "2. int" << endl;
	// –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø–æ–≤ –ø–æ –≤–∫—É—Å—É
	int type = 0;
	do
	{
		cin >> type;
		if (type != 1 && type != 2) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à "—É–º–Ω—ã–π" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª
		{
			cout << "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä" << endl; // –ì—É–ª—è–π, –º–∞–ª—å—á–∏–∫
		}
	} while (type != 1 && type != 2);

	cout << "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã" << endl;
	size_t m, n;
	cin >> m >> n;

	size_t result;
	if (type == 1)
	{
		result = solve_with_input<char>(input_choice, m, n);
	}
	else if (type == 2)
	{
		result = solve_with_input<int>(input_choice, m, n);
	}
	cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç: " << result << endl;
	return 0;
}